import requests
import pandas as pd
import random
import tkinter as tk
from tkinter import messagebox

# Function to fetch book data from Open Library API
def fetch_book_data(query, max_books=10):
    """
    Fetches book data from the Open Library API based on the search query.
    Returns a list of books in dictionary format.
    """
    try:
        url = f"https://openlibrary.org/search.json?q={query}&limit={max_books}"
        response = requests.get(url)

        # Raise an exception if the HTTP request was not successful
        response.raise_for_status()

        # Parse the JSON response
        data = response.json()

        # Check if the 'docs' key exists in the response data
        if 'docs' not in data:
            print("Error: No books found in the API response.")
            return []

        books = []
        for doc in data.get('docs', []):
            # Extracting book details with default values if not found
            title = doc.get('title', 'N/A')
            author = ', '.join(doc.get('author_name', ['N/A']))
            year = doc.get('first_publish_year', 'N/A')
            genre = ', '.join(doc.get('subject', ['N/A']))
            
            # Safely check for the 'average_rating' key
            rating = doc.get('average_rating', None)  # Will be None if no rating is provided
            
            # If no rating, set it to 'N/A'
            if rating is None:
                rating = 'N/A'
            
            rank = doc.get('rank', 'N/A')

            books.append({
                'title': title,
                'author': author,
                'year': year,
                'genre': genre,
                'rating': rating,
                'rank': rank
            })
        return books

    except requests.exceptions.RequestException as e:
        # Handle network-related errors (e.g., no internet, API down)
        print(f"Network error occurred: {e}")
        return []
    except Exception as e:
        # Catch any other errors (e.g., invalid JSON format)
        print(f"Error fetching book data: {e}")
        return []


# Clean the dataframe by handling missing or 'N/A' values
def clean_data(df):
    """
    Cleans the fetched book data by handling missing values and converting columns to appropriate data types.
    """
    df = df.replace('N/A', None)
    df['year'] = pd.to_numeric(df['year'], errors='coerce')  # Convert 'year' to numeric, set errors to NaN
    df['rating'] = pd.to_numeric(df['rating'], errors='coerce')  # Convert 'rating' to numeric, set errors to NaN
    return df


# Function to filter books based on user criteria
def filter_books(df, genre=None, min_rating=None, max_year=None, min_rank=None):
    """
    Filters the book dataframe based on user-specified criteria: genre, rating, year, and rank.
    """
    filtered_books = df

    if genre:
        filtered_books = filtered_books[filtered_books['genre'].str.contains(genre, case=False, na=False)]
    
    if min_rating is not None:
        filtered_books = filtered_books[filtered_books['rating'] >= min_rating]
    
    if max_year:
        filtered_books = filtered_books[filtered_books['year'] <= max_year]
    
    if min_rank:
        filtered_books = filtered_books[filtered_books['rank'] >= min_rank]
    
    return filtered_books


# Function to suggest a random book from the filtered list
def random_book_suggestion(df):
    """
    Returns a random book suggestion from the filtered dataframe.
    """
    return df.sample(n=1)


# Function to safely convert user input to float
def safe_float_conversion(input_str):
    """
    Safely converts a string input to a float. Returns None if the conversion fails.
    """
    if input_str is None or input_str.strip() == "":
        return None
    try:
        return float(input_str)
    except ValueError:
        print(f"Invalid input for rating: {input_str}. Please enter a valid number.")
        return None


# Function to safely convert user input to int
def safe_int_conversion(input_str):
    """
    Safely converts a string input to an integer. Returns None if the conversion fails.
    """
    if input_str is None or input_str.strip() == "":
        return None
    try:
        return int(input_str)
    except ValueError:
        print(f"Invalid input for year or rank: {input_str}. Please enter a valid integer.")
        return None


# Function to handle user input and treat "blank" as an empty input
def handle_blank_input(input_str):
    """
    Handles user input and returns None if the input is 'blank' or empty.
    """
    if input_str.lower() == "blank" or input_str.strip() == "":
        return None
    return input_str


# Function to save the fetched data to a file (CSV or JSON)
def save_books_to_file(df, file_name="books_data"):
    """
    Saves the fetched book data to a CSV file and a JSON file.
    The default file name is 'books_data'.
    """
    # Saving as CSV
    try:
        csv_file = f"{file_name}.csv"
        df.to_csv(csv_file, index=False)
        print(f"Books data saved successfully to {csv_file}")
    except Exception as e:
        print(f"Error saving data to CSV: {e}")
    
    # Saving as JSON
    try:
        json_file = f"{file_name}.json"
        df.to_json(json_file, orient='records', lines=True)
        print(f"Books data saved successfully to {json_file}")
    except Exception as e:
        print(f"Error saving data to JSON: {e}")


# GUI setup with Tkinter
def fetch_and_filter_books():
    query = query_entry.get()
    books = fetch_book_data(query, max_books=10)

    if not books:
        return

    books_df = pd.DataFrame(books)
    books_cleaned_df = clean_data(books_df)

    genre = genre_entry.get()
    min_rating = min_rating_entry.get()
    max_year = max_year_entry.get()
    min_rank = min_rank_entry.get()

    # Convert inputs to appropriate types
    min_rating = safe_float_conversion(min_rating)
    max_year = safe_int_conversion(max_year)
    min_rank = safe_int_conversion(min_rank)

    filtered_books = filter_books(books_cleaned_df, genre, min_rating, max_year, min_rank)

    if filtered_books.empty:
        messagebox.showinfo("No Books", "No books match your filter criteria.")
    else:
        result_text.delete(1.0, tk.END)  # Clear previous result
        result_text.insert(tk.END, filtered_books.to_string(index=False))

        suggest_random_button.config(state="normal")  # Enable the random suggestion button

        # Handle save books action
        save_button.config(state="normal", command=lambda: save_books_to_file(filtered_books))
    
    # Store filtered books in a global variable or in the state of the program
    global current_filtered_books
    current_filtered_books = filtered_books


def random_suggestion():
    # Use the global variable `current_filtered_books`
    if current_filtered_books is not None and not current_filtered_books.empty:
        suggested_book = random_book_suggestion(current_filtered_books)
        messagebox.showinfo("Random Book Suggestion", suggested_book.to_string(index=False))
    else:
        messagebox.showinfo("No Results", "Please filter books first.")


# Setting up the Tkinter window
root = tk.Tk()
root.title("Book Scraper")

# Input fields for book query and filters
query_label = tk.Label(root, text="Enter book search term:")
query_label.pack()
query_entry = tk.Entry(root)
query_entry.pack()

genre_label = tk.Label(root, text="Enter genre to filter by (optional):")
genre_label.pack()
genre_entry = tk.Entry(root)
genre_entry.pack()

min_rating_label = tk.Label(root, text="Enter minimum rating (optional):")
min_rating_label.pack()
min_rating_entry = tk.Entry(root)
min_rating_entry.pack()

max_year_label = tk.Label(root, text="Enter maximum publication year (optional):")
max_year_label.pack()
max_year_entry = tk.Entry(root)
max_year_entry.pack()

min_rank_label = tk.Label(root, text="Enter minimum rank (optional):")
min_rank_label.pack()
min_rank_entry = tk.Entry(root)
min_rank_entry.pack()

# Buttons for fetching, filtering, saving, and random suggestion
fetch_button = tk.Button(root, text="Fetch and Filter Books", command=fetch_and_filter_books)
fetch_button.pack()

suggest_random_button = tk.Button(root, text="Get Random Suggestion", command=random_suggestion, state="disabled")
suggest_random_button.pack()

save_button = tk.Button(root, text="Save Books Data", state="disabled")
save_button.pack()

# Text box for displaying filtered book results
result_text = tk.Text(root, height=10, width=50)
result_text.pack()

# Run the Tkinter main loop
root.mainloop()
